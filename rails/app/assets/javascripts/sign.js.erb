<% Rails.application.assets.context_class.class_eval do
  include Rails.application.routes.url_helpers
  include ActionView::Helpers::JavaScriptHelper
end
%>

// Referenz zum Debug-Textfeld
var commit_text_field;
// Die momentan geladene Sequenz, undefiniert wenn nicht in Datenbank
var current_sequence = null;
// Referenz zum Sequenz-<select>-Element
var sequence_select;

function message_success(text) {
  $.achtung({message: text, timeout:5, className:'achtungSuccess'});
}

function message_error(text) {
  $.achtung({message: text, className:'achtungFail'});
}

// Gibt den Text aus dem Debug-Textfeld zurück
function get_commit_text() {
  return commit_text_field.val();
}

// Lädt einen Sequenz-String
function load_sequence_from_text(text) {
  commit_text_field.val(text);
}

// Gibt die ID der momentan ausgewählten Sequenz zurück
function get_selected_sequence_id() {
// FIXME handle no selection
  return sequence_select.find("option:selected").val();
}

function new_sequence() {
  load_sequence_from_text("");
  current_sequence = null;
}

function load_sequence() {
  $.ajax({
    url: '<%=j sequences_path %>/' + get_selected_sequence_id(),
    type: 'get'
  }).done(function (data, status, xhr) {
    current_sequence = data;
    load_sequence_from_text(data.text);
    message_success("Sequenz »" + data.title + "« geladen");
  }).fail(function (xhr, status, e) {
    message_error("Laden fehlgeschlagen: " + e);
  });
}

function save_sequence() {
  // Wenn die Sequenz noch nicht gespeichert wurde, ist das Verhalten wie »Speichern als«
  if (current_sequence === null) {
    save_sequence_as();
    return;
  }
  $.ajax({
    url: '<%=j sequences_path %>/' + current_sequence.id,
    type: 'patch',
    data: { sequence: { text: $("#commit_text").val() } }
  }).done(function (data, status, xhr) {
    message_success("Sequenz gespeichert");
  }).fail(function (xhr, status, e) {
    message_error("Speichern fehlgeschlagen: " + e);
  });
}

function save_sequence_as() {
  var title = prompt("Bitte geben Sie einen Sequenznamen ein", (current_sequence === null) ? "" : current_sequence.title);
  if (title == null) {
    return;
  }
  $.ajax({
    url: '<%=j sequences_path %>',
    type: 'post',
    data: { sequence: { title: title, text: get_commit_text() } }
  }).done(function (data, status, xhr) {
    current_sequence = data;
    var new_option = $("<option/>", { value: current_sequence.id, text: current_sequence.title } );
    sequence_select.append(new_option);
    message_success("Sequenz gespeichert");
  }).fail(function (xhr, status, e) {
    message_error("Speichern fehlgeschlagen: " + e);
  });
}

function delete_sequence() {
  var delete_id = get_selected_sequence_id();
  $.ajax({
    url: '<%=j sequences_path %>/' + delete_id,
    type: 'delete'
  }).done(function (data, status, xhr) {
    sequence_select.find("option[value=" + delete_id + "]").remove();
    if (current_sequence !== null && current_sequence.id == delete_id) {
      current_sequence = null;
    }
    message_success("Sequenz gelöscht");
  }).fail(function (xhr, status, e) {
    message_error("Löschen fehlgeschlagen: " + e);
  });
}

$(document).ready(function() {
  commit_text_field = $("#commit_text");
  sequence_select = $("#sequences");

  $("#sequence_new").click(new_sequence);
  $("#sequence_load").click(load_sequence);
  $("#sequence_save").click(save_sequence);
  $("#sequence_save_as").click(save_sequence_as);
  $("#sequence_delete").click(delete_sequence);
  
  $("#commit_form")
    .on("ajax:success", function(e, data, status, xhr) {
      message_success('Text an die Laufschrift übergeben');
    })
    .on("ajax:error", function(e, xhr, status, error) {
      message_error('Fehler beim Senden an die Laufschrift: ' + error);
    });
});
